{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/lib/query.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAC7C,OAAO,eAAe,CAAC;AAGvB,wCAAwC;AACxC,4BAA4B;AAC5B,wCAAwC;AACxC,MAAM,CAAC,KAAK,UAAU,eAAe;IACjC,MAAM,GAAG,GAAG;;;;;;;;;;;;;;;;KAgBX,CAAC;IAEF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEzC,OAAO,IAAI,CAAC;AAChB,CAAC;AAGD,wCAAwC;AACxC,yBAAyB;AACzB,wCAAwC;AACxC,MAAM,CAAC,KAAK,UAAU,WAAW;IAC7B,MAAM,GAAG,GAAG;;;;;;;;;KASX,CAAC;IAEF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEzC,OAAO,IAAI,CAAC;AAChB,CAAC;AAGD,wCAAwC;AACxC,8BAA8B;AAC9B,wCAAwC;AACxC,MAAM,CAAC,KAAK,UAAU,iBAAiB;IACnC,MAAM,GAAG,GAAG;;;;;KAKX,CAAC;IAEF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEzC,OAAO,IAAI,CAAC;AAChB,CAAC;AAcD,yBAAyB;AACzB,wCAAwC;AACxC,wCAAwC;AACxC,oBAAoB;AACpB,cAAc;AACd,eAAe;AACf,0DAA0D;AAC1D,mBAAmB;AACnB,SAAS;AAET,8CAA8C;AAE9C,mBAAmB;AACnB,IAAI;AAIJ,uBAAuB;AACvB,wCAAwC;AACxC,qFAAqF;AACrF,qEAAqE;AACrE,2EAA2E;AAC3E,oBAAoB;AACpB,sDAAsD;AACtD,8BAA8B;AAC9B,SAAS;AAET,4EAA4E;AAC5E,yDAAyD;AACzD,IAAI","sourcesContent":["import client from '../config/connection.js';\r\nimport 'console.table';\r\n\r\n\r\n// -------------------------------------\r\n// DISPLAY EMPLOYEE FUNCTION\r\n// -------------------------------------\r\nexport async function getAllEmployees() {\r\n    const sql = `\r\n    SELECT \r\n        employee.id AS id,\r\n        employee.first_name,\r\n        employee.last_name,\r\n        title,\r\n        name AS department,\r\n        salary,\r\n        CONCAT(manager.first_name, ' ', manager.last_name) AS manager\r\n    FROM employee\r\n    JOIN role\r\n        ON employee.role_id = role.id\r\n    JOIN department  \r\n        ON role.department_id = department.id\r\n    LEFT JOIN employee as manager \r\n        ON employee.manager_id = manager.id\r\n    `;\r\n\r\n    const { rows } = await client.query(sql);\r\n\r\n    return rows;\r\n}\r\n\r\n\r\n// -------------------------------------\r\n// DISPLAY ROLES FUNCTION\r\n// -------------------------------------\r\nexport async function getAllRoles() {\r\n    const sql = `\r\n    SELECT \r\n        role.id AS id,\r\n        title,\r\n        name AS department,\r\n        salary\r\n        FROM role\r\n    JOIN department  \r\n        ON role.department_id = department.id\r\n    `;\r\n    \r\n    const { rows } = await client.query(sql);\r\n    \r\n    return rows;\r\n}\r\n\r\n\r\n// -------------------------------------\r\n// DISPLAY DEPARTMENT FUNCTION\r\n// -------------------------------------\r\nexport async function getAllDepartments() {\r\n    const sql = `\r\n    SELECT \r\n        department.id AS id,\r\n        name AS department\r\n    FROM department\r\n    `;\r\n\r\n    const { rows } = await client.query(sql);\r\n\r\n    return rows;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// DISPLAY USERS FUNCTION\r\n// -------------------------------------\r\n// export async function getAllUsers() {\r\n//     const sql = `\r\n//     SELECT \r\n//         id, \r\n//         CONCAT(first_name, ' ', last_name) AS user_name\r\n//     FROM users  \r\n//     `;\r\n\r\n//     const {rows} = await client.query(sql);\r\n\r\n//     return rows;\r\n// }\r\n\r\n\r\n\r\n// CREATE SHOP FUNCTION\r\n// -------------------------------------\r\n// export async function createShop(user_id: number, name: string, address: string) {\r\n//     //Doing this with ${name} can cause issues with sql injection \r\n//     //So we're using placeholders for now, and will input values later  \r\n//     const sql = `\r\n//         INSERT INTO shops (name, address, user_id) \r\n//         VALUES ($1, $2, $3)\r\n//     `;\r\n\r\n//     // this will input the values in order, into the 'prepared statement'\r\n//     await client.query(sql, [name, address, user_id]);\r\n// }"]}